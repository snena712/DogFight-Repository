Texture2D		g_Tex : register(t0);					// テクスチャ
SamplerState	g_SamplerLinear : register(s0);			// サンプラー

cbuffer ConstantBufferWorld : register(b0)		// ワールド変換行列
{
	matrix World;
}

cbuffer ConstantBufferProjection : register(b1) // ワールド変換行列
{
	matrix ViewProjection;
}

cbuffer ConstantBufferProjection : register(b2) // ワールド変換行列
{
	matrix Projection;
}

cbuffer OceanBuffer : register(b3) // ワールド変換行列
{
	float size;		// サイズ
	float uv;		// 動かすかも？よう
	float widHeiMapSize;
	float dummy2;
}


struct VSParticleOut
{
	float3 position : POSITION;
	float4 color : COLOR;
	float2 texcoord : TEXCOORD;
};

struct GSParticleOut
{
	float4 position : SV_Position;
	float4 color : COLOR;
	float2 texcoord : TEXCOORD;
	float4 WPos		: TEXCOORD1;
};


//--------------------------------------------------------------------------------------
// Vertex Shader
//--------------------------------------------------------------------------------------

VSParticleOut GroundVS(uint ID : SV_VertexID)
{
	VSParticleOut Out = (VSParticleOut)0;
	Out.color = float4(1, 1, 1, 1);
	Out.position = 0;
	Out.position.x = ID % (int)size;
	Out.position.y = ID / (int)size % (int)(size*size);

	Out.texcoord = Out.position % 2;
	return Out;
}

//--------------------------------------------------------------------------------------
// ジオメトリシェーダー
//--------------------------------------------------------------------------------------

//static const float2 g_positions[4] = { float2(-1, 1), float2(1, 1), float2(-1, -1), float2(1, -1) };
static const float2 g_positions[4] = { float2(-0.5, 0.5), float2(0.5, 0.5), float2(-0.5, -0.5), float2(0.5, -0.5) };
static const float2 g_texcoords[4] = { float2(0, 1), float2(1, 1), float2(0, 0), float2(1, 0) };

[maxvertexcount(4)]
void GroundGS(point VSParticleOut In[1], inout TriangleStream<GSParticleOut> SpriteStream)
{
	[unroll]
	for (int i = 0; i < 4; i++)
	{
		GSParticleOut Out = (GSParticleOut)0;
		float4 position = float4(In[0].position.x, In[0].position.y, 0, 1) + 1 * float4(g_positions[i].x, g_positions[i].y, 0, 0);

		Out.position = mul(position, World);
		Out.WPos = Out.position;
		Out.position = mul(Out.position, ViewProjection);
		Out.position = mul(Out.position, Projection);


		Out.color = In[0].color;
		Out.texcoord = (g_texcoords[i] + In[0].texcoord ) % 2.0f;
		SpriteStream.Append(Out);
	}
	SpriteStream.RestartStrip();
}

float4 GroundPS(GSParticleOut In) : SV_Target
{
	float4 texcol = g_Tex.Sample(g_SamplerLinear,  In.texcoord);
	float4 col;
	col = texcol * In.color;
	return col;
}